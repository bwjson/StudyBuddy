// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: paypal/paypal.proto

package paypalv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Paypal_BuySubscription_FullMethodName    = "/paypal.Paypal/BuySubscription"
	Paypal_CancelSubscription_FullMethodName = "/paypal.Paypal/CancelSubscription"
)

// PaypalClient is the client API for Paypal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaypalClient interface {
	BuySubscription(ctx context.Context, in *PaymentInfo, opts ...grpc.CallOption) (*Response, error)
	CancelSubscription(ctx context.Context, in *SubscriptionInfo, opts ...grpc.CallOption) (*Response, error)
}

type paypalClient struct {
	cc grpc.ClientConnInterface
}

func NewPaypalClient(cc grpc.ClientConnInterface) PaypalClient {
	return &paypalClient{cc}
}

func (c *paypalClient) BuySubscription(ctx context.Context, in *PaymentInfo, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Paypal_BuySubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paypalClient) CancelSubscription(ctx context.Context, in *SubscriptionInfo, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Paypal_CancelSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaypalServer is the server API for Paypal service.
// All implementations must embed UnimplementedPaypalServer
// for forward compatibility.
type PaypalServer interface {
	BuySubscription(context.Context, *PaymentInfo) (*Response, error)
	CancelSubscription(context.Context, *SubscriptionInfo) (*Response, error)
	mustEmbedUnimplementedPaypalServer()
}

// UnimplementedPaypalServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaypalServer struct{}

func (UnimplementedPaypalServer) BuySubscription(context.Context, *PaymentInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuySubscription not implemented")
}
func (UnimplementedPaypalServer) CancelSubscription(context.Context, *SubscriptionInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscription not implemented")
}
func (UnimplementedPaypalServer) mustEmbedUnimplementedPaypalServer() {}
func (UnimplementedPaypalServer) testEmbeddedByValue()                {}

// UnsafePaypalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaypalServer will
// result in compilation errors.
type UnsafePaypalServer interface {
	mustEmbedUnimplementedPaypalServer()
}

func RegisterPaypalServer(s grpc.ServiceRegistrar, srv PaypalServer) {
	// If the following call pancis, it indicates UnimplementedPaypalServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Paypal_ServiceDesc, srv)
}

func _Paypal_BuySubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaypalServer).BuySubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paypal_BuySubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaypalServer).BuySubscription(ctx, req.(*PaymentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paypal_CancelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaypalServer).CancelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paypal_CancelSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaypalServer).CancelSubscription(ctx, req.(*SubscriptionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Paypal_ServiceDesc is the grpc.ServiceDesc for Paypal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Paypal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paypal.Paypal",
	HandlerType: (*PaypalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuySubscription",
			Handler:    _Paypal_BuySubscription_Handler,
		},
		{
			MethodName: "CancelSubscription",
			Handler:    _Paypal_CancelSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paypal/paypal.proto",
}
