definitions:
  delivery.buySubscriptionRequest:
    properties:
      card_number:
        type: string
      cvv:
        type: string
      email:
        type: string
      valid_until:
        type: string
    required:
    - card_number
    - cvv
    - email
    - valid_until
    type: object
  delivery.cancelSubscriptionRequest:
    properties:
      card_number:
        type: string
      email:
        type: string
    required:
    - card_number
    - email
    type: object
  delivery.errorResponse:
    properties:
      message:
        type: string
    type: object
  delivery.successGRPCResponse:
    properties:
      detail:
        type: string
      message:
        type: string
    type: object
  delivery.successResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  dto.SignInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.User:
    properties:
      email:
        type: string
      name:
        type: string
      password_hash:
        type: string
      username:
        type: string
    required:
    - email
    - name
    - password_hash
    - username
    type: object
info:
  contact: {}
  description: This is a sample server api.
  title: StudyBuddy API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Sign in
      parameters:
      - description: Sign up data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.successResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/delivery.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      summary: Sign in
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Sign up using email verification
      parameters:
      - description: Sign up data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.successResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/delivery.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      summary: Sign up
      tags:
      - auth
  /subscriptions/buy/:
    post:
      consumes:
      - application/json
      description: Subscription by PayPal
      parameters:
      - description: Subscription Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.buySubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.successGRPCResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/delivery.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Buy subscription
      tags:
      - paypal
  /subscriptions/cancel/:
    post:
      consumes:
      - application/json
      description: Cancel subscription via PayPal
      parameters:
      - description: Subscription Cancellation Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.cancelSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.successGRPCResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/delivery.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Cancel subscription
      tags:
      - paypal
  /tags:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/delivery.successResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all tags
      tags:
      - tags
  /tags/{id}:
    get:
      consumes:
      - application/json
      description: Get tags information by user ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      - description: Sort by field (id, name, username)
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: sort_order
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.successResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get User by tagID
      tags:
      - tags
  /tags/usertags/{id}:
    get:
      consumes:
      - application/json
      description: Get user's tag information by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Sort by field (id, title, description)
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: sort_order
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.successResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get tags by UserID
      tags:
      - tags
  /user:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users
      parameters:
      - description: Sort by field (id, name, username)
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: sort_order
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/delivery.successResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user in the system
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.successResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/delivery.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new user
      tags:
      - users
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user from the system by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.successResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/delivery.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user information by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.successResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.successResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/delivery.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/delivery.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user by ID
      tags:
      - users
  /user/email:
    post:
      consumes:
      - multipart/form-data
      description: Send an email to the specified address
      parameters:
      - in: formData
        name: email
        required: true
        type: string
      - in: formData
        name: message
        required: true
        type: string
      - in: formData
        name: subject
        required: true
        type: string
      - description: Attachments
        in: formData
        name: attachments
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.successResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/delivery.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/delivery.errorResponse'
      summary: Send an email
      tags:
      - email
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
